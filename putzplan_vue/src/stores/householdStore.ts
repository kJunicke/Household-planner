import { ref } from 'vue'
import { defineStore } from 'pinia'
import { supabase } from '@/lib/supabase'
import type { Household } from '@/types/households'
import { useAuthStore } from './authStore'

export const useHouseholdStore = defineStore('household', () => {
    // State
    const currentHousehold = ref<Household | null>(null)

    // Actions
    const loadUserHousehold = async () => {
        const authStore = useAuthStore()
        if (!authStore.user) {
            console.error('No user logged in')
            return
        }

        // 1. Finde household_member Eintrag für diesen User
        const { data: memberData, error: memberError } = await supabase
            .from('household_members')
            .select('*')
            .eq('user_id', authStore.user.id)
            .maybeSingle()

        if (memberError) {
            console.error('Error loading household member:', memberError)
            return
        }

        if (!memberData) {
            console.log('User has no household')
            return
        }

        // 2. Lade den zugehörigen Household
        const { data: householdData, error: householdError } = await supabase
            .from('households')
            .select('*')
            .eq('household_id', memberData.household_id)
            .single()

        if (householdError) {
            console.error('Error loading household:', householdError)
            return
        }

        currentHousehold.value = householdData
        console.log('Loaded household:', householdData)
    }

    const createHousehold = async (name: string) => {
        const authStore = useAuthStore()
        if (!authStore.user) {
            console.error('No user logged in')
            throw new Error('Not logged in')
        }

        // 1. Create household (invite_code generated by Supabase)
        const { data: householdData, error: householdError } = await supabase
            .from('households')
            .insert({ name })
            .select()
            .single()

        if (householdError) {
            console.error('Error creating household:', householdError)
            throw new Error(householdError.message)
        }

        // 2. Add user as member
        const { error: memberError } = await supabase
            .from('household_members')
            .insert({
                household_id: householdData.household_id,
                user_id: authStore.user.id
            })

        if (memberError) {
            console.error('Error adding user to household:', memberError)
            throw new Error(memberError.message)
        }

        currentHousehold.value = householdData
        console.log('Created household:', householdData)
    }

    const joinHousehold = async (inviteCode: string) => {
        const authStore = useAuthStore()
        if (!authStore.user) {
            console.error('No user logged in')
            return false
        }

        // Check if user already has a household
        if (currentHousehold.value) {
            console.error('User already in household')
            return false
        }

        // 1. Find household by invite code
        const { data: householdData, error: householdError } = await supabase
            .from('households')
            .select('*')
            .eq('invite_code', inviteCode.toUpperCase())
            .maybeSingle()

        if (householdError || !householdData) {
            console.error('Error finding household:', householdError)
            return false
        }

        // 2. Add user as member
        const { error: memberError } = await supabase
            .from('household_members')
            .insert({
                household_id: householdData.household_id,
                user_id: authStore.user.id
            })

        if (memberError) {
            console.error('Error joining household:', memberError)
            return false
        }

        currentHousehold.value = householdData
        console.log('Joined household:', householdData)
        return true
    }

    const leaveHousehold = async () => {
        const authStore = useAuthStore()
        if (!authStore.user) {
            console.error('No user logged in')
            throw new Error('Not logged in')
        }

        if (!currentHousehold.value) {
            throw new Error('Not in a household')
        }

        // Delete household_member entry
        const { error } = await supabase
            .from('household_members')
            .delete()
            .eq('user_id', authStore.user.id)

        if (error) {
            console.error('Error leaving household:', error)
            throw new Error(error.message)
        }

        // Clear state
        currentHousehold.value = null
        console.log('Left household')
    }

    return {
        currentHousehold,
        loadUserHousehold,
        createHousehold,
        joinHousehold,
        leaveHousehold
    }
})
